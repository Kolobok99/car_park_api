# Generated by Django 4.1.2 on 2022-10-14 11:54

import apps.account.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('base', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Время создания ')),
                ('modified_on', models.DateTimeField(auto_now=True, verbose_name='Время добавления')),
                ('email', models.EmailField(error_messages={'invalid': 'Некорректный email', 'unique': 'Пользователь с таким email уже существует.'}, max_length=254, primary_key=True, serialize=False, verbose_name='Почта')),
                ('password', models.CharField(max_length=128, verbose_name='Пароль')),
                ('role', models.CharField(choices=[('a', 'admin'), ('m', 'manager'), ('d', 'driver'), ('e', 'engineer')], default='d', max_length=1, verbose_name='Роль')),
                ('is_active', models.BooleanField(default=False, editable=False, verbose_name='Активирован?')),
                ('activation_code', models.CharField(blank=True, editable=False, max_length=6, null=True, verbose_name='Код активации аккаунта')),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
        ),
        migrations.CreateModel(
            name='WhiteListEmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
            ],
            options={
                'verbose_name': 'White List of Emil',
                'verbose_name_plural': 'White List of Emil',
            },
        ),
        migrations.CreateModel(
            name='UserDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Время создания ')),
                ('modified_on', models.DateTimeField(auto_now=True, verbose_name='Время добавления')),
                ('start_date', models.DateField(verbose_name='Дата выдачи')),
                ('end_date', models.DateField(verbose_name='Дата окончания')),
                ('file', models.FileField(blank=True, null=True, upload_to=apps.account.models.UserDocument.return_path_to_upload_doc, verbose_name='Копия')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='docs', to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
                ('type', models.ForeignKey(on_delete=models.SET(None), to='base.doctype', verbose_name='Тип')),
            ],
            options={
                'verbose_name': 'Документ водителя',
                'verbose_name_plural': 'Документы водителя',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=20, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=20, verbose_name='Фамилия')),
                ('patronymic', models.CharField(max_length=20, verbose_name='Отчество')),
                ('phone', models.CharField(max_length=11, unique=True, verbose_name='Номер телефона')),
                ('image', models.ImageField(blank=True, null=True, upload_to=apps.account.models.Profile.return_path_to_upload_avatar, verbose_name='Аватарка')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Профиль',
                'verbose_name_plural': 'Профили',
            },
        ),
        migrations.CreateModel(
            name='FuelCard',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Время создания ')),
                ('modified_on', models.DateTimeField(auto_now=True, verbose_name='Время добавления')),
                ('limit', models.PositiveIntegerField(verbose_name='Лимит')),
                ('number', models.CharField(max_length=16, primary_key=True, serialize=False, verbose_name='Номер')),
                ('balance', models.PositiveIntegerField(blank=True, null=True, verbose_name='Остаток')),
                ('owner', models.OneToOneField(blank=True, null=True, on_delete=models.SET(None), related_name='card', to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
            ],
            options={
                'verbose_name': 'Топливная карта',
                'verbose_name_plural': 'Топливные карты',
            },
        ),
    ]
